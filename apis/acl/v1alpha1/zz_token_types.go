// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplatedPoliciesTemplateVariablesInitParameters struct {

	// (String) The name of node, workload identity or service.
	// The name of node, workload identity or service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplatedPoliciesTemplateVariablesObservation struct {

	// (String) The name of node, workload identity or service.
	// The name of node, workload identity or service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplatedPoliciesTemplateVariablesParameters struct {

	// (String) The name of node, workload identity or service.
	// The name of node, workload identity or service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TokenInitParameters struct {

	// (String) The uuid of the token. If omitted, Consul will generate a random uuid.
	// The uuid of the token. If omitted, Consul will generate a random uuid.
	AccessorID *string `json:"accessorId,omitempty" tf:"accessor_id,omitempty"`

	// (String) The description of the token.
	// The description of the token.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// (Boolean) The flag to set the token local to the current datacenter.
	// The flag to set the token local to the current datacenter.
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// (String) The namespace to create the token within.
	// The namespace to create the token within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the token. (see below for nested schema)
	// The list of node identities that should be applied to the token.
	NodeIdentities []TokenNodeIdentitiesInitParameters `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL token is associated with.
	// The partition the ACL token is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies attached to the token.
	// The list of policies attached to the token.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Set of String) The list of roles attached to the token.
	// The list of roles attached to the token.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Block List) The list of service identities that should be applied to the token. (see below for nested schema)
	// The list of service identities that should be applied to the token.
	ServiceIdentities []TokenServiceIdentitiesInitParameters `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []TokenTemplatedPoliciesInitParameters `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type TokenNodeIdentitiesInitParameters struct {

	// (String) The datacenter of the node.
	// The datacenter of the node.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`
}

type TokenNodeIdentitiesObservation struct {

	// (String) The datacenter of the node.
	// The datacenter of the node.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`
}

type TokenNodeIdentitiesParameters struct {

	// (String) The datacenter of the node.
	// The datacenter of the node.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName" tf:"node_name,omitempty"`
}

type TokenObservation struct {

	// (String) The uuid of the token. If omitted, Consul will generate a random uuid.
	// The uuid of the token. If omitted, Consul will generate a random uuid.
	AccessorID *string `json:"accessorId,omitempty" tf:"accessor_id,omitempty"`

	// (String) The description of the token.
	// The description of the token.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) The flag to set the token local to the current datacenter.
	// The flag to set the token local to the current datacenter.
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// (String) The namespace to create the token within.
	// The namespace to create the token within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the token. (see below for nested schema)
	// The list of node identities that should be applied to the token.
	NodeIdentities []TokenNodeIdentitiesObservation `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL token is associated with.
	// The partition the ACL token is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies attached to the token.
	// The list of policies attached to the token.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Set of String) The list of roles attached to the token.
	// The list of roles attached to the token.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Block List) The list of service identities that should be applied to the token. (see below for nested schema)
	// The list of service identities that should be applied to the token.
	ServiceIdentities []TokenServiceIdentitiesObservation `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []TokenTemplatedPoliciesObservation `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type TokenParameters struct {

	// (String) The uuid of the token. If omitted, Consul will generate a random uuid.
	// The uuid of the token. If omitted, Consul will generate a random uuid.
	// +kubebuilder:validation:Optional
	AccessorID *string `json:"accessorId,omitempty" tf:"accessor_id,omitempty"`

	// (String) The description of the token.
	// The description of the token.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	// If set this represents the point after which a token should be considered revoked and is eligible for destruction.
	// +kubebuilder:validation:Optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// (Boolean) The flag to set the token local to the current datacenter.
	// The flag to set the token local to the current datacenter.
	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// (String) The namespace to create the token within.
	// The namespace to create the token within.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the token. (see below for nested schema)
	// The list of node identities that should be applied to the token.
	// +kubebuilder:validation:Optional
	NodeIdentities []TokenNodeIdentitiesParameters `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL token is associated with.
	// The partition the ACL token is associated with.
	// +kubebuilder:validation:Optional
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies attached to the token.
	// The list of policies attached to the token.
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Set of String) The list of roles attached to the token.
	// The list of roles attached to the token.
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// (Block List) The list of service identities that should be applied to the token. (see below for nested schema)
	// The list of service identities that should be applied to the token.
	// +kubebuilder:validation:Optional
	ServiceIdentities []TokenServiceIdentitiesParameters `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	// +kubebuilder:validation:Optional
	TemplatedPolicies []TokenTemplatedPoliciesParameters `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type TokenServiceIdentitiesInitParameters struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type TokenServiceIdentitiesObservation struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type TokenServiceIdentitiesParameters struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	// +kubebuilder:validation:Optional
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

type TokenTemplatedPoliciesInitParameters struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	TemplateVariables []TemplatedPoliciesTemplateVariablesInitParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type TokenTemplatedPoliciesObservation struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	TemplateVariables []TemplatedPoliciesTemplateVariablesObservation `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type TokenTemplatedPoliciesParameters struct {

	// (List of String) Specifies the datacenters the effective policy is valid within.
	// Specifies the datacenters the effective policy is valid within.
	// +kubebuilder:validation:Optional
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	// +kubebuilder:validation:Optional
	TemplateVariables []TemplatedPoliciesTemplateVariablesParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

// TokenSpec defines the desired state of Token
type TokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TokenInitParameters `json:"initProvider,omitempty"`
}

// TokenStatus defines the observed state of Token.
type TokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Token is the Schema for the Tokens API. The consul_acl_token resource writes an ACL token into Consul. If you need to get the secret ID after creating the ACL token you can use the consul_acl_token_secret_id datasource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,consul}
type Token struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TokenSpec   `json:"spec"`
	Status            TokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TokenList contains a list of Tokens
type TokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Token `json:"items"`
}

// Repository type metadata.
var (
	Token_Kind             = "Token"
	Token_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Token_Kind}.String()
	Token_KindAPIVersion   = Token_Kind + "." + CRDGroupVersion.String()
	Token_GroupVersionKind = CRDGroupVersion.WithKind(Token_Kind)
)

func init() {
	SchemeBuilder.Register(&Token{}, &TokenList{})
}
