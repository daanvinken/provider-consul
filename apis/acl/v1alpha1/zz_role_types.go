// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeIdentitiesInitParameters struct {

	// (String) Specifies the node's datacenter.
	// Specifies the node's datacenter.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`
}

type NodeIdentitiesObservation struct {

	// (String) Specifies the node's datacenter.
	// Specifies the node's datacenter.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`
}

type NodeIdentitiesParameters struct {

	// (String) Specifies the node's datacenter.
	// Specifies the node's datacenter.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter" tf:"datacenter,omitempty"`

	// (String) The name of the node.
	// The name of the node.
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName" tf:"node_name,omitempty"`
}

type RoleInitParameters struct {

	// (String) A free form human readable description of the role.
	// A free form human readable description of the role.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the ACL role.
	// The name of the ACL role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the role within.
	// The namespace to create the role within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the role. (see below for nested schema)
	// The list of node identities that should be applied to the role.
	NodeIdentities []NodeIdentitiesInitParameters `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL role is associated with.
	// The partition the ACL role is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Block Set) The list of service identities that should be applied to the role. (see below for nested schema)
	// The list of service identities that should be applied to the role.
	ServiceIdentities []ServiceIdentitiesInitParameters `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []TemplatedPoliciesInitParameters `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type RoleObservation struct {

	// (String) A free form human readable description of the role.
	// A free form human readable description of the role.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the ACL role.
	// The name of the ACL role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the role within.
	// The namespace to create the role within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the role. (see below for nested schema)
	// The list of node identities that should be applied to the role.
	NodeIdentities []NodeIdentitiesObservation `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL role is associated with.
	// The partition the ACL role is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Block Set) The list of service identities that should be applied to the role. (see below for nested schema)
	// The list of service identities that should be applied to the role.
	ServiceIdentities []ServiceIdentitiesObservation `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	TemplatedPolicies []TemplatedPoliciesObservation `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type RoleParameters struct {

	// (String) A free form human readable description of the role.
	// A free form human readable description of the role.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the ACL role.
	// The name of the ACL role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the role within.
	// The namespace to create the role within.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (Block List) The list of node identities that should be applied to the role. (see below for nested schema)
	// The list of node identities that should be applied to the role.
	// +kubebuilder:validation:Optional
	NodeIdentities []NodeIdentitiesParameters `json:"nodeIdentities,omitempty" tf:"node_identities,omitempty"`

	// (String) The partition the ACL role is associated with.
	// The partition the ACL role is associated with.
	// +kubebuilder:validation:Optional
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Set of String) The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// The list of policies that should be applied to the role. Both the policy ID or its name can be used.
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// (Block Set) The list of service identities that should be applied to the role. (see below for nested schema)
	// The list of service identities that should be applied to the role.
	// +kubebuilder:validation:Optional
	ServiceIdentities []ServiceIdentitiesParameters `json:"serviceIdentities,omitempty" tf:"service_identities,omitempty"`

	// (Block List) The list of templated policies that should be applied to the token. (see below for nested schema)
	// The list of templated policies that should be applied to the token.
	// +kubebuilder:validation:Optional
	TemplatedPolicies []TemplatedPoliciesParameters `json:"templatedPolicies,omitempty" tf:"templated_policies,omitempty"`
}

type ServiceIdentitiesInitParameters struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// +listType=set
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServiceIdentitiesObservation struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// +listType=set
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServiceIdentitiesParameters struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// +kubebuilder:validation:Optional
	// +listType=set
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

type TemplateVariablesInitParameters struct {

	// (String) The name of the ACL role.
	// The name of node, workload identity or service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplateVariablesObservation struct {

	// (String) The name of the ACL role.
	// The name of node, workload identity or service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplateVariablesParameters struct {

	// (String) The name of the ACL role.
	// The name of node, workload identity or service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TemplatedPoliciesInitParameters struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	TemplateVariables []TemplateVariablesInitParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type TemplatedPoliciesObservation struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// Specifies the datacenters the effective policy is valid within.
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	TemplateVariables []TemplateVariablesObservation `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

type TemplatedPoliciesParameters struct {

	// (Set of String) The datacenters the effective policy is valid within. When no datacenters are provided the effective policy is valid in all datacenters including those which do not yet exist but may in the future.
	// Specifies the datacenters the effective policy is valid within.
	// +kubebuilder:validation:Optional
	Datacenters []*string `json:"datacenters,omitempty" tf:"datacenters,omitempty"`

	// (String) The name of the templated policies.
	// The name of the templated policies.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName" tf:"template_name,omitempty"`

	// (Block List, Max: 1) The templated policy variables. (see below for nested schema)
	// The templated policy variables.
	// +kubebuilder:validation:Optional
	TemplateVariables []TemplateVariablesParameters `json:"templateVariables,omitempty" tf:"template_variables,omitempty"`
}

// RoleSpec defines the desired state of Role
type RoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleInitParameters `json:"initProvider,omitempty"`
}

// RoleStatus defines the observed state of Role.
type RoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Role is the Schema for the Roles API. The consul_acl_role can be used to manage Consul ACL roles https://developer.hashicorp.com/consul/docs/security/acl/acl-roles.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,consul}
type Role struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RoleSpec   `json:"spec"`
	Status RoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleList contains a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Role `json:"items"`
}

// Repository type metadata.
var (
	Role_Kind             = "Role"
	Role_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Role_Kind}.String()
	Role_KindAPIVersion   = Role_Kind + "." + CRDGroupVersion.String()
	Role_GroupVersionKind = CRDGroupVersion.WithKind(Role_Kind)
)

func init() {
	SchemeBuilder.Register(&Role{}, &RoleList{})
}
