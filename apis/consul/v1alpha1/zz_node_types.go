// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeInitParameters struct {

	// The address of the node being added to, or referenced in the catalog.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Key/value pairs that are associated with the node.
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// The name of the node being added to, or referenced in the catalog.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The partition the node is associated with.
	// The partition the node is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`
}

type NodeObservation struct {

	// The address of the node being added to, or referenced in the catalog.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key/value pairs that are associated with the node.
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// The name of the node being added to, or referenced in the catalog.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The partition the node is associated with.
	// The partition the node is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`
}

type NodeParameters struct {

	// The address of the node being added to, or referenced in the catalog.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Key/value pairs that are associated with the node.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// The name of the node being added to, or referenced in the catalog.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The partition the node is associated with.
	// The partition the node is associated with.
	// +kubebuilder:validation:Optional
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`
}

// NodeSpec defines the desired state of Node
type NodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodeInitParameters `json:"initProvider,omitempty"`
}

// NodeStatus defines the observed state of Node.
type NodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Node is the Schema for the Nodes API. Provides access to Node data in Consul. This can be used to define a node.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,consul}
type Node struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.address) || (has(self.initProvider) && has(self.initProvider.address))",message="spec.forProvider.address is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   NodeSpec   `json:"spec"`
	Status NodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeList contains a list of Nodes
type NodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Node `json:"items"`
}

// Repository type metadata.
var (
	Node_Kind             = "Node"
	Node_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Node_Kind}.String()
	Node_KindAPIVersion   = Node_Kind + "." + CRDGroupVersion.String()
	Node_GroupVersionKind = CRDGroupVersion.WithKind(Node_Kind)
)

func init() {
	SchemeBuilder.Register(&Node{}, &NodeList{})
}
