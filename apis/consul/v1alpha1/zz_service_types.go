// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CheckInitParameters struct {

	// (String) An ID, unique per agent.
	// An ID, *unique per agent*.
	CheckID *string `json:"checkId,omitempty" tf:"check_id,omitempty"`

	// (String) The time after which the service is automatically deregistered when in the critical state. Defaults to 30s. Setting to 0 will disable.
	// The time after which the service is automatically deregistered when in the `critical` state. Defaults to `30s`. Setting to `0` will disable.
	DeregisterCriticalServiceAfter *string `json:"deregisterCriticalServiceAfter,omitempty" tf:"deregister_critical_service_after,omitempty"`

	// (String) The HTTP endpoint to call for an HTTP check.
	// The HTTP endpoint to call for an HTTP check.
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (Block Set) The headers to send for an HTTP check. The attributes of each header is given below. (see below for nested schema)
	// The headers to send for an HTTP check. The attributes of each header is given below.
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// check invocation.
	// The interval to wait between each health-check invocation.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// checks. Defaults to GET.
	// The method to use for HTTP health-checks. Defaults to `GET`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The name of the service.
	// The name of the health-check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) An opaque field meant to hold human readable text.
	// An opaque field meant to hold human readable text.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// check status.
	// The initial health-check status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The TCP address and port to connect to for a TCP check.
	// The TCP address and port to connect to for a TCP check.
	TCP *string `json:"tcp,omitempty" tf:"tcp,omitempty"`

	// checks. Defaults to false.
	// Whether to deactivate certificate verification for HTTP health-checks. Defaults to `false`.
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String) Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	// Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type CheckObservation struct {

	// (String) An ID, unique per agent.
	// An ID, *unique per agent*.
	CheckID *string `json:"checkId,omitempty" tf:"check_id,omitempty"`

	// (String) The time after which the service is automatically deregistered when in the critical state. Defaults to 30s. Setting to 0 will disable.
	// The time after which the service is automatically deregistered when in the `critical` state. Defaults to `30s`. Setting to `0` will disable.
	DeregisterCriticalServiceAfter *string `json:"deregisterCriticalServiceAfter,omitempty" tf:"deregister_critical_service_after,omitempty"`

	// (String) The HTTP endpoint to call for an HTTP check.
	// The HTTP endpoint to call for an HTTP check.
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (Block Set) The headers to send for an HTTP check. The attributes of each header is given below. (see below for nested schema)
	// The headers to send for an HTTP check. The attributes of each header is given below.
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// check invocation.
	// The interval to wait between each health-check invocation.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// checks. Defaults to GET.
	// The method to use for HTTP health-checks. Defaults to `GET`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The name of the service.
	// The name of the health-check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) An opaque field meant to hold human readable text.
	// An opaque field meant to hold human readable text.
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// check status.
	// The initial health-check status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The TCP address and port to connect to for a TCP check.
	// The TCP address and port to connect to for a TCP check.
	TCP *string `json:"tcp,omitempty" tf:"tcp,omitempty"`

	// checks. Defaults to false.
	// Whether to deactivate certificate verification for HTTP health-checks. Defaults to `false`.
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String) Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	// Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type CheckParameters struct {

	// (String) An ID, unique per agent.
	// An ID, *unique per agent*.
	// +kubebuilder:validation:Optional
	CheckID *string `json:"checkId" tf:"check_id,omitempty"`

	// (String) The time after which the service is automatically deregistered when in the critical state. Defaults to 30s. Setting to 0 will disable.
	// The time after which the service is automatically deregistered when in the `critical` state. Defaults to `30s`. Setting to `0` will disable.
	// +kubebuilder:validation:Optional
	DeregisterCriticalServiceAfter *string `json:"deregisterCriticalServiceAfter,omitempty" tf:"deregister_critical_service_after,omitempty"`

	// (String) The HTTP endpoint to call for an HTTP check.
	// The HTTP endpoint to call for an HTTP check.
	// +kubebuilder:validation:Optional
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (Block Set) The headers to send for an HTTP check. The attributes of each header is given below. (see below for nested schema)
	// The headers to send for an HTTP check. The attributes of each header is given below.
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// check invocation.
	// The interval to wait between each health-check invocation.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval" tf:"interval,omitempty"`

	// checks. Defaults to GET.
	// The method to use for HTTP health-checks. Defaults to `GET`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The name of the service.
	// The name of the health-check.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) An opaque field meant to hold human readable text.
	// An opaque field meant to hold human readable text.
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// check status.
	// The initial health-check status.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The TCP address and port to connect to for a TCP check.
	// The TCP address and port to connect to for a TCP check.
	// +kubebuilder:validation:Optional
	TCP *string `json:"tcp,omitempty" tf:"tcp,omitempty"`

	// checks. Defaults to false.
	// Whether to deactivate certificate verification for HTTP health-checks. Defaults to `false`.
	// +kubebuilder:validation:Optional
	TLSSkipVerify *bool `json:"tlsSkipVerify,omitempty" tf:"tls_skip_verify,omitempty"`

	// (String) Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	// Specifies a timeout for outgoing connections in the case of a HTTP or TCP check.
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout" tf:"timeout,omitempty"`
}

type HeaderInitParameters struct {

	// (String) The name of the service.
	// The name of the header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The header's list of values.
	// The header's list of values.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {

	// (String) The name of the service.
	// The name of the header.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The header's list of values.
	// The header's list of values.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderParameters struct {

	// (String) The name of the service.
	// The name of the header.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (List of String) The header's list of values.
	// The header's list of values.
	// +kubebuilder:validation:Optional
	Value []*string `json:"value" tf:"value,omitempty"`
}

type ServiceInitParameters struct {

	// (String) The address of the service. Defaults to the address of the node.
	// The address of the service. Defaults to the address of the node.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Block Set) (see below for nested schema)
	Check []CheckInitParameters `json:"check,omitempty" tf:"check,omitempty"`

	// (String) The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// entropy feature for this service's tags. Defaults to false.
	// Specifies to disable the anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride *bool `json:"enableTagOverride,omitempty" tf:"enable_tag_override,omitempty"`

	// (Boolean, Deprecated)
	External *bool `json:"external,omitempty" tf:"external,omitempty"`

	// (Map of String) A map of arbitrary KV metadata linked to the service instance.
	// A map of arbitrary KV metadata linked to the service instance.
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the service within.
	// The namespace to create the service within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The name of the node the to register the service on.
	// The name of the node the to register the service on.
	Node *string `json:"node,omitempty" tf:"node,omitempty"`

	// (String) The partition the service is associated with.
	// The partition the service is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Number) The port of the service.
	// The port of the service.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) If the service ID is not provided, it will be defaulted to the value of the name attribute.
	// If the service ID is not provided, it will be defaulted to the value of the `name` attribute.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// (List of String) A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	// A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ServiceObservation struct {

	// (String) The address of the service. Defaults to the address of the node.
	// The address of the service. Defaults to the address of the node.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Block Set) (see below for nested schema)
	Check []CheckObservation `json:"check,omitempty" tf:"check,omitempty"`

	// (String) The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// entropy feature for this service's tags. Defaults to false.
	// Specifies to disable the anti-entropy feature for this service's tags. Defaults to `false`.
	EnableTagOverride *bool `json:"enableTagOverride,omitempty" tf:"enable_tag_override,omitempty"`

	// (Boolean, Deprecated)
	External *bool `json:"external,omitempty" tf:"external,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) A map of arbitrary KV metadata linked to the service instance.
	// A map of arbitrary KV metadata linked to the service instance.
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the service within.
	// The namespace to create the service within.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The name of the node the to register the service on.
	// The name of the node the to register the service on.
	Node *string `json:"node,omitempty" tf:"node,omitempty"`

	// (String) The partition the service is associated with.
	// The partition the service is associated with.
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Number) The port of the service.
	// The port of the service.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) If the service ID is not provided, it will be defaulted to the value of the name attribute.
	// If the service ID is not provided, it will be defaulted to the value of the `name` attribute.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// (List of String) A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	// A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ServiceParameters struct {

	// (String) The address of the service. Defaults to the address of the node.
	// The address of the service. Defaults to the address of the node.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Block Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Check []CheckParameters `json:"check,omitempty" tf:"check,omitempty"`

	// (String) The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	// The datacenter to use. This overrides the agent's default datacenter and the datacenter in the provider setup.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// entropy feature for this service's tags. Defaults to false.
	// Specifies to disable the anti-entropy feature for this service's tags. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EnableTagOverride *bool `json:"enableTagOverride,omitempty" tf:"enable_tag_override,omitempty"`

	// (Boolean, Deprecated)
	// +kubebuilder:validation:Optional
	External *bool `json:"external,omitempty" tf:"external,omitempty"`

	// (Map of String) A map of arbitrary KV metadata linked to the service instance.
	// A map of arbitrary KV metadata linked to the service instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`

	// (String) The name of the service.
	// The name of the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The namespace to create the service within.
	// The namespace to create the service within.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) The name of the node the to register the service on.
	// The name of the node the to register the service on.
	// +kubebuilder:validation:Optional
	Node *string `json:"node,omitempty" tf:"node,omitempty"`

	// (String) The partition the service is associated with.
	// The partition the service is associated with.
	// +kubebuilder:validation:Optional
	Partition *string `json:"partition,omitempty" tf:"partition,omitempty"`

	// (Number) The port of the service.
	// The port of the service.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) If the service ID is not provided, it will be defaulted to the value of the name attribute.
	// If the service ID is not provided, it will be defaulted to the value of the `name` attribute.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// (List of String) A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	// A list of values that are opaque to Consul, but can be used to distinguish between services or nodes.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceInitParameters `json:"initProvider,omitempty"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Service is the Schema for the Services API. A high-level resource for creating a Service in Consul in the Consul catalog. This is appropriate for registering external services https://www.consul.io/docs/guides/external.html and can be used to create services addressable by Consul that cannot be registered with a local agent https://www.consul.io/docs/agent/basics.html. -> NOTE: If a Consul agent is running on the node where this service is registered, it is not recommended to use this resource as the service will be removed during the next anti-entropy synchronization https://www.consul.io/docs/architecture/anti-entropy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,consul}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.node) || (has(self.initProvider) && has(self.initProvider.node))",message="spec.forProvider.node is a required parameter"
	Spec   ServiceSpec   `json:"spec"`
	Status ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
